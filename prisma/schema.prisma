// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email        String        @unique
  name         String
  phoneNumber  String?
  image        String?
  password     String?
  salt         String?
  refreshToken String?
  serviceType  ServiceType[]
  areas        Area[]

  provider   String?
  providerId String?

  reviews       Review[]
  moveInfos     MoveInfo[]
  likeDrivers   Driver[]
  questions     Question[]
  notifications Notification[]
}

model Driver {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email          String        @unique
  name           String
  nickname       String?
  image          String?
  password       String?
  salt           String?
  refreshToken   String?
  phoneNumber    String?
  introduce      String?
  description    String?
  serviceType    ServiceType[]
  availableAreas Area[]
  startAt        DateTime      @default(now())

  applyCount Int   @default(0)
  likeCount  Int   @default(0)
  rating     Float @default(0)

  provider   String?
  providerId String?

  reviews       Review[]
  requests      Request[]
  estimations   Estimation[]
  likedUsers    User[]
  questions     Question[]
  notifications Notification[]
}

model MoveInfo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceType ServiceType
  date        DateTime
  fromAddress String
  toAddress   String
  progress    Progress

  confirmedEstimation   Estimation? @relation(fields: [confirmedEstimationId], references: [id], name: "confirmedEstimation")
  confirmedEstimationId String?     @unique

  owner         User           @relation(fields: [ownerId], references: [id])
  ownerId       String
  estimations   Estimation[]   @relation(name: "MoveInfoEstimation")
  requests      Request[]
  notifications Notification[]

  @@index([createdAt])
}

model Request {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  moveInfo   MoveInfo @relation(fields: [moveInfoId], references: [id])
  moveInfoId String
  status     Status

  driver         Driver        @relation(fields: [driverId], references: [id])
  driverId       String
  notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId String?       @unique

  @@index([createdAt])
}

model Estimation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price   Int?
  comment String

  moveInfo   MoveInfo @relation(fields: [moveInfoId], references: [id], name: "MoveInfoEstimation")
  moveInfoId String
  driver     Driver   @relation(fields: [driverId], references: [id])
  driverId   String

  confirmedFor   MoveInfo?      @relation(name: "confirmedEstimation")
  confirmedForId String?        @unique
  questions      Question[]
  reviews        Review[]
  notifications  Notification[]

  @@index([createdAt])
}

model Question {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  estimation     Estimation    @relation(fields: [estimationId], references: [id])
  estimationId   String
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
  driver         Driver?       @relation(fields: [driverId], references: [id])
  driverId       String?
  notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId String?       @unique

  @@index([createdAt])
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment String
  score   Int

  driver       Driver     @relation(fields: [driverId], references: [id])
  driverId     String
  owner        User       @relation(fields: [ownerId], references: [id])
  ownerId      String
  estimation   Estimation @relation(fields: [estimationId], references: [id])
  estimationId String

  @@index([createdAt])
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    NotificationType
  message String
  isRead  Boolean

  // target
  targetUser     User?   @relation(fields: [userId], references: [id])
  targetUserId   String?
  targetDriver   Driver? @relation(fields: [driverId], references: [id])
  targetDriverId String?

  // related
  moveInfo     MoveInfo?   @relation(fields: [moveInfoId], references: [id])
  moveInfoId   String?
  request      Request?
  estimation   Estimation? @relation(fields: [estimationId], references: [id])
  estimationId String?
  question     Question?
  userId       String?
  driverId     String?

  @@index([createdAt])
}

/**
 * ******************************************************* enum *********************************************
 */

enum ServiceType {
  SMALL
  HOME
  OFFICE
}

enum Area {
  SEOUL
  GYEONGGI
  INCHEON
  GAGNWON
  CHUNGBUK
  CHUNGNAM
  SEJONG
  DAEJEON
  JEONBUK
  JEONNAM
  GWANGJU
  GYEONGBUK
  GYEONGNAM
  DAEGU
  ULSAN
  BUSAN
  JEJU
}

enum Status {
  PENDING
  EXPIRED
  APPLY
  REJECTED
  CANCELED
}

enum Progress {
  PENDING
  OPEN
  EXPIRED
  CONFIRMED
  CANCELED
  COMPLETE
}

enum NotificationType {
  MOVE_INFO_EXPIRED
  NEW_REQUEST
  NEW_ESTIMATION
  REQUEST_REJECTED
  ESTIMATION_CONFIRMED
  NEW_QUESTION
  D_7
  D_DAY
}
